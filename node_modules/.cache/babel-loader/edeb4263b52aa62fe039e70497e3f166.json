{"ast":null,"code":"var _jsxFileName = \"/Users/skyezhang/Downloads/reactproject/src/components/Expenses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport ExpenseFilter from \"./ExpenseFilter\";\nimport \"./Expenses.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Expenses(props) {\n  _s();\n\n  const [currentOption, setcurrentOption] = useState(\"2020\");\n\n  const filterChangeHandler = selectedYear => {\n    setcurrentOption(selectedYear);\n  };\n  /*\n  filter or map function will return a new array and not change the\n  the original array, coz useState always  stores a string, so using\n  /toString ' */\n\n\n  const filterExpense = props.items.filter(pramters => {\n    return pramters.date.getFullYear().toString() === currentOption;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"expenses\",\n    children: [/*#__PURE__*/_jsxDEV(ExpenseFilter, {\n      selected: currentOption,\n      ChangeFilter: filterChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), filterExpense.length == 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No items found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 37\n    }, this), filterExpense.length, filterExpense.length == 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No items found \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) : filterExpense.map(pramters => {\n      //render items\n      return /*#__PURE__*/_jsxDEV(ExpenseItem, {\n        title: pramters.title,\n        amount: pramters.amount,\n        date: pramters.date\n      }, pramters.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Expenses, \"7M7QkFbrqX3+5sBqH2k0kQi+jW0=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["/Users/skyezhang/Downloads/reactproject/src/components/Expenses.js"],"names":["React","useState","ExpenseItem","ExpenseFilter","Expenses","props","currentOption","setcurrentOption","filterChangeHandler","selectedYear","filterExpense","items","filter","pramters","date","getFullYear","toString","length","map","title","amount","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,gBAAP;;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,MAAD,CAAlD;;AACA,QAAMO,mBAAmB,GAAIC,YAAD,IAAkB;AAC5CF,IAAAA,gBAAgB,CAACE,YAAD,CAAhB;AACD,GAFD;AAGA;AACF;AACA;AACA;;;AACE,QAAMC,aAAa,GAAGL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAoBC,QAAD,IAAc;AACrD,WAAOA,QAAQ,CAACC,IAAT,CAAcC,WAAd,GAA4BC,QAA5B,OAA2CV,aAAlD;AACD,GAFqB,CAAtB;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE,QAAC,aAAD;AACE,MAAA,QAAQ,EAAEA,aADZ;AAEE,MAAA,YAAY,EAAEE;AAFhB;AAAA;AAAA;AAAA;AAAA,YADF,EAKGE,aAAa,CAACO,MAAd,IAAwB,CAAxB,iBAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALhC,EAMGP,aAAa,CAACO,MANjB,EAOGP,aAAa,CAACO,MAAd,IAAwB,CAAxB,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,GAGCP,aAAa,CAACQ,GAAd,CAAmBL,QAAD,IAAc;AAC9B;AACA,0BACE,QAAC,WAAD;AAEE,QAAA,KAAK,EAAEA,QAAQ,CAACM,KAFlB;AAGE,QAAA,MAAM,EAAEN,QAAQ,CAACO,MAHnB;AAIE,QAAA,IAAI,EAAEP,QAAQ,CAACC;AAJjB,SACOD,QAAQ,CAACQ,EADhB;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KAVD,CAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD;;GArCQjB,Q;;KAAAA,Q;AAsCT,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport ExpenseItem from \"./ExpenseItem\";\nimport ExpenseFilter from \"./ExpenseFilter\";\nimport \"./Expenses.css\";\nfunction Expenses(props) {\n  const [currentOption, setcurrentOption] = useState(\"2020\");\n  const filterChangeHandler = (selectedYear) => {\n    setcurrentOption(selectedYear);\n  };\n  /*\nfilter or map function will return a new array and not change the\n the original array, coz useState always  stores a string, so using\n/toString ' */\n  const filterExpense = props.items.filter((pramters) => {\n    return pramters.date.getFullYear().toString() === currentOption;\n  });\n  return (\n    <div className='expenses'>\n      <ExpenseFilter\n        selected={currentOption}\n        ChangeFilter={filterChangeHandler}\n      />\n      {filterExpense.length == 0 && <p>No items found</p>}\n      {filterExpense.length}\n      {filterExpense.length == 0 ? (\n        <p>No items found </p>\n      ) : (\n        filterExpense.map((pramters) => {\n          //render items\n          return (\n            <ExpenseItem\n              key={pramters.id}\n              title={pramters.title}\n              amount={pramters.amount}\n              date={pramters.date}\n            />\n          );\n        })\n      )}\n    </div>\n  );\n}\nexport default Expenses;\n"]},"metadata":{},"sourceType":"module"}